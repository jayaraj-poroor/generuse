[group todomvc]
[	usecase	open-browser		desc: "Open browser window"]
[	pre-condition	browser is-not-shown?		]
[	actors	user	system	]
open browser.	
show browser.		
				
[	usecase	open-site		desc: "Open website"]
[	pre-condition	address-bar is-ready?		]
[	actors	user	system	]
input address-bar with: site-url.	
show todomvc-page.	

[	usecase	new-todo desc: "New TODO item"]
[	pre-condition	todomvc-page is-shown?]
[	actors	user	system	]
input todomvc-page's new-todo with: new-todo-text;
enter todomvc-page's new-todo.
[branch address-bar has-all-or-active-view-url?]
show todomvc-page's todo-list's last-item's title with: new-todo-text;
save-in-store new-todo-text.
[branch	address-bar has-completed-view-url?]
save-in-store new-todo-text.

[usecase edit-todo desc: "Edit TODO item"]
[ pre-condition todomvc-page's todo-list is-not-empty?]
[actors user system]
pick-any todomvc-page's todo-list giving todo-item;
double-click todo-item's title.
show todo-item's editor.
input todo-item's editor with: edited-todo-text;
enter todo-item's editor.
show todo-item's title with: edited-todo-text.

[ usecase complete-todo desc: "Complete TODO item"]
[ pre-condition todomvc-page's todo-list is-not-empty?]
[ actors user system]
pick-any todomvc-page's todo-list giving todo-item.
let todo-item's completed be completed.
click todo-item's completed.
update todomvc-page's remaining-count.
[branch is not completed]
[do todo-becomes-completed with todo-item]
[branch let otherwise]
[do todo-becomes-active with todo-item]

[ usecase todo-becomes-completed todo-item]
[actors system]
[branch address-bar has-active-view-url?]
remove todo-item.
[branch let otherwise]
select todo-item's completed;
show todo-item's title with text-decoration: "line-through".

[ usecase todo-becomes-active todo-item]
[actors system]
[branch address-bar has-completed-view-url?]
remove todo-item.
[branch let otherwise]
unselect todo-item's completed;
show todo-item's title with text-decoration: "none".

[ usecase view-completed desc: "View completed items"]
[ pre-condition local-storage is-not-empty?]
[ actors user system]
click todomvc-page's view-selection's completed.
show todomvc-page's view-selection's completed with font-weight: bold;
pick local-storage with: todo-key giving todo-items;
pick todo-items with completed: true giving completed-items;
show todomvc-page's todo-list with: completed-items text-decoration: "line-through".

[ usecase remove-todo desc: "Remove TODO item"]
[ pre-condition todomvc-page's todo-list is-not-empty?]
[ actors user system]
pick-any todomvc-page's todo-list giving todo-item;
mouse-over todo-item.
show todo-item's remove.
click todo-item's remove.
remove todo-item.
remove-from-store todo-item.

[ usecase view-active desc: "View active items"]
[ pre-condition local-storage is-not-empty?]
[ actors user system]
click todomvc-page's view-selection's active.
show todomvc-page's view-selection's active with font-weight: bold;
pick local-storage with: todo-key giving todo-items;
pick todo-items with completed: false giving active-items;
show todomvc-page's todo-list with: active-items.

[ usecase view-all desc: "View all items"]
[ pre-condition local-storage is-not-empty?]
[ actors user system]
click todomvc-page's view-selection's all.
show todomvc-page's view-selection's all with font-weight: bold;
pick local-storage with: todo-key giving todo-items;
show todomvc-page's todo-list with: todo-items.

[usecase clear-completed desc: "Clear all completed items"]
[ pre-condition local-storage has-completed-items?]
[actors user system]
click todomvc-page's clear-completed.
clear-completed-in todo-page;
clear-completed-in local-store.

[action has-completed-items?]
[object local-storage clear-completed:local-storage]
pick local-storage with: todo-key giving todo-items.
pick todo-items with completed: true giving completed-items.
count completed-items giving completed-count.
let completed-count > 0.

[action clear-completed-in desc: "Clear completed items in $target"]
[object todo-page  clear-completed:todo-page]
read todomvc-page's completed-count giving completed-count;
must-be completed-count = 0;
read todomvc-page's todo-list giving todo-list;
count todo-list with completed: true giving completed-list-count;
must-be completed-list-count = 0.

[action clear-completed-in desc: "Clear completed items in $target"]
[object local-store clear-completed:local-store]
pick local-storage with: todo-key giving todo-items;
pick todo-items with completed: true giving completed-items;
count completed-items giving completed-items-count;
must-be completed-items-count = 0.

[action has-completed-view-url?]
[object address-bar new-todo: address-bar todo-becomes-completed: address-bar todo-becomes-active: address-bar]
read address-bar giving url.
ends url with: "completed".

[action has-active-view-url?]
[object address-bar new-todo: address-bar todo-becomes-completed: address-bar todo-becomes-active: address-bar]
read address-bar giving url.
ends url with: "active".

[action has-all-or-active-view-url?]
[object address-bar new-todo: address-bar todo-becomes-completed: address-bar todo-becomes-active: address-bar]
read address-bar giving url.
ends url with: "completed" giving is-completed.
let not is-completed be result.

[action is-not-empty?]
[object todo-list remove-todo:todomvc-page's todo-list complete-todo:todomvc-page's todo-list view-completed:todomvc-page's todo-list 
edit-todo:todomvc-page's todo-list]
is-shown? todo-list's first giving result.

[action is-not-empty?]
[object local-storage view-completed:local-storage view-active:local-storage clear-completed:local-storage]
pick local-storage with: todo-key giving todo-items.
count todo-items giving total-count.
let total-count > 0.

[action remove-from-store desc: "Removes $target from store"]
[object todo-item remove-todo: todo-item]
pick local-storage with: todo-key giving todo-items;
count todo-items with title: before-removal's todo-title giving todo-count;
count todo-items giving total-count.
must-be before-removal's todo-count = todo-count + 1.
must-be before-removal's total-count = total-count + 1.

[action save-in-store desc:"Saves $target in store"]
[object todo-text new-todo:new-todo-text]
pick local-storage with: todo-key giving todo-items;
let todo-items's last be last-item;
must-be last-item's title = todo-text.

[action update]
[object remaining-count complete-todo:todomvc-page's remaining-count]
pick local-storage with: todo-key giving todo-items;
count todo-items with completed:false giving active-count.
read remaining-count giving count-shown.
let active-count  = count-shown.

[action	is-not-shown?		]
[object	browser	open-browser:browser	]
	is-shown? browser giving is-shown.		
	let not is-shown be result.		
			
[action	is-ready?		]
[object	address-bar	open-site:address-bar	]
	is-shown? browser giving browser-is-shown.
	read address-bar if: browser-is-shown giving url.
	log "url : " + url.
	let "?" if: not browser-is-shown be url.	
	let  (url = "about:blank") or (url = "data:,") be result.		
	
	
[state before-removal usecase:remove-todo]
[needs todo-item]
pick local-storage with: todo-key giving todo-items;
read todo-item's title giving todo-title.
count todo-items with title: todo-title giving todo-count.
count todo-items giving total-count.
	